import glob
from pathlib import Path
import csv
from aminoacids import *

###############
# DESCRIPTION #
###############
"""
This file serves to generate three matrices based off of the SABmark
sequence alignments. These three matrices are the substitution, insertion,
and deletion matrices, which can be represented in dictionary format
or written to a CSV file.

Author Yolanda Shen
"""
total = 1123468

final_matrix = {
    'V': 77021, 
    'L': 98912, 
    'S': 68616, 
    'I': 63622, 
    'T': 63299, 
    'K': 67092, 
    'N': 51506, 
    'A': 89942, 
    'D': 65389, 
    'E': 74058, 
    'R': 55836, 
    'Y': 40693, 
    'P': 52809, 
    'G': 83125, 
    'F': 45038, 
    'W': 15424, 
    'Q': 42015, 
    'H': 26076, 
    'M': 23437, 
    'C': 19558
}

freq_matrix = {
    'V': 0.06855646978819156, 
    'L': 0.08804167096882154, 
    'S': 0.061075170810383564, 
    'I': 0.05663000637312322, 
    'T': 0.056342503747325245,
    'K': 0.059718656873181966, 
    'N': 0.04584554255216882, 
    'A': 0.08005746492111925, 
    'D': 0.058202814855429795, 
    'E': 0.06591910049952468, 
    'R': 0.04969967991967728, 
    'Y': 0.03622088034550161, 
    'P': 0.047005344166456006,
    'G': 0.07398964634506724, 
    'F': 0.04008836922814001, 
    'W': 0.01372891795760983, 
    'Q': 0.03739759387895338, 
    'H': 0.023210273901882385,
    'M': 0.020861297340022147, 
    'C': 0.01740859552742045
}

for k, v in final_matrix.items():
    final_matrix[k] = v / total * 0.62

# print(final_matrix)

sub_tot = 202253
sub_freq_matrix = {'GT': 538, 'ES': 882, 'WG': 109, 'QE': 971, 'LR': 745, 'VR': 559, 'LV': 3013, 'HR': 336, 'VI': 2843, 
'WA': 211, 'AE': 1176, 'KT': 743, 'VM': 517, 'ET': 858, 'AG': 1425, 'DA': 713, 'GR': 507, 'HI': 214, 'GI': 400, 'QK': 890, 'DQ': 507, 'IA': 1348, 'LG': 567, 'ID': 238, 'RQ': 690, 'KG': 532, 'SK': 806, 'ED': 1368, 'TV': 1188, 'DT': 591, 'LC': 354, 'KL': 785, 'KR': 1280, 'HD': 286, 'GL': 550, 'VD': 326, 'TY': 406, 'VY': 724, 'TR': 719, 'AL': 1803, 'LI': 3175, 'AY': 628, 'IG': 389, 'KV': 649, 'KA': 1068, 'AI': 1211, 'EG': 625, 'PG': 351, 'AR': 904, 'SM': 213, 'HY': 291, 'AK': 1031, 'TS': 1332, 'HG': 235, 'KE': 1332, 'YA': 651, 'EA': 1221, 'FE': 263, 'SV': 758, 'ER': 1017, 'IM': 676, 'IK': 482, 'HS': 312, 'LA': 1789, 'HT': 293, 'GS': 874, 'AD': 763, 'QA': 781, 'GA': 1384, 'MA': 476, 'NG': 712, 'KS': 803, 'LF': 1680, 'LY': 929, 'FL': 1712, 'RI': 456, 'VA': 1894, 'AT': 1116, 'DN': 794, 'GN': 571, 'GV': 585, 'DE': 1308, 'RK': 1390, 'LS': 696, 'SY': 380, 'KN': 671, 'FM': 350, 'KI': 486, 'LM': 1091, 'LD': 424, 'PR': 299, 'QN': 420, 'SG': 958, 'HL': 312, 'TE': 835, 'LT': 1012, 'EV': 708, 'FQ': 236, 'SI': 473, 'EQ': 1059, 'HE': 350, 'HA': 379, 'DG': 720, 'QG': 408, 'GK': 506, 'FI': 1048, 'RC': 107, 'IL': 3197, 'EN': 643, 'WR': 130, 'VC': 398, 'HK': 328, 'VS': 675, 'WL': 358, 'KH': 348, 'QI': 303, 'RH': 360, 'SN': 755, 'EP': 526, 'TL': 960, 'EK': 1363, 'KY': 299, 'DK': 776, 'RS': 665, 'FR': 297, 'MV': 575, 'KQ': 806, 'AN': 640, 'SD': 817, 'DF': 209, 'HQ': 261, 'VQ': 417, 'TK': 778, 'GH': 239, 'AV': 1898, 'EY': 343, 'PE': 454, 'IP': 289, 'YV': 768, 'LW': 404, 'FD': 185, 'IF': 1064, 'SW': 123, 'IE': 447, 'GD': 612, 'DP': 375, 'GQ': 384, 'MW': 77, 'NH': 306, 'LE': 706, 'RA': 843, 'AQ': 732, 'VL': 2905, 'VH': 331, 'HV': 
286, 'PS': 459, 'LK': 764, 'KC': 105, 'TD': 658, 'TM': 244, 'IY': 619, 'AW': 191, 'TA': 1159, 'HN': 289, 'EI': 456, 'FA': 714, 'SF': 351, 'AF': 698, 'IT': 767, 'IR': 435, 'AS': 1456, 'MF': 330, 'NT': 634, 'FV': 1204, 'DS': 755, 'WK': 98, 'HW': 75, 'SL': 742, 'AC': 402, 'VK': 584, 'TN': 518, 'EH': 342, 'PD': 346, 'QR': 669, 'IV': 3129, 'YN': 248, 'SA': 1472, 'VT': 1157, 'RN': 503, 'AP': 619, 'DV': 353, 'QH': 263, 'GC': 172, 'ND': 961, 'WE': 104, 'KD': 818, 'EW': 133, 'LQ': 547, 'VE': 630, 'NY': 301, 'ST': 
1235, 'QD': 564, 'DH': 287, 'VG': 595, 'DC': 67, 'IQ': 360, 'TQ': 554, 'EM': 200, 'PN': 237, 'PK': 423, 'YQ': 228, 'AH': 371, 'SE': 974, 'RV': 606, 'NA': 696, 'LN': 442, 'AM': 442, 'KM': 211, 'YE': 414, 'GE': 543, 'QL': 525, 'DR': 482, 'ML': 1004, 'YH': 314, 'EF': 281, 'RE': 1078, 'DM': 133, 'FW': 337, 'NS': 718, 'LH': 369, 'YM': 231, 'VF': 1055, 'WI': 217, 'FY': 955, 'GM': 187, 'PT': 418, 'FK': 299, 'QS': 510, 'VP': 433, 'IC': 283, 'SH': 301, 'HF': 203, 'RM': 218, 'WQ': 81, 'KP': 432, 'IH': 217, 'PQ': 241, 'FS': 382, 'NE': 662, 'RF': 287, 'EL': 685, 'QT': 525, 'HM': 89, 'PA': 663, 'TH': 297, 'KF': 282, 'TG': 631, 'HC': 53, 'MY': 217, 'NQ': 453, 'SC': 192, 'IS': 496, 'YW': 318, 'DL': 414, 'QP': 243, 'QV': 445, 'VN': 352, 'SR': 644, 'FP': 175, 'YL': 999, 'SQ': 558, 'RD': 632, 'MI': 498, 'FN': 226, 'RL': 698, 'GY': 287, 'KW': 119, 'RT': 652, 'MG': 232, 'MR': 192, 'PI': 305, 'MT': 253, 'MS': 217, 'PL': 443, 
'QY': 213, 'YK': 355, 'MQ': 165, 'TW': 144, 'NP': 279, 'MD': 116, 'PC': 59, 'YT': 419, 'YD': 243, 'FH': 223, 'IN': 245, 'TF': 451, 'NL': 484, 'YS': 328, 'GW': 111, 'YF': 947, 'NF': 204, 'WF': 258, 'FT': 426, 'GP': 359, 'WY': 277, 'DY': 252, 'NK': 674, 'TI': 775, 'QC': 66, 'NR': 615, 'YR': 348, 'LP': 418, 
'PV': 490, 'NM': 144, 'NI': 299, 'YP': 190, 'IW': 215, 'FG': 317, 'PH': 119, 'CW': 48, 'NV': 415, 'WV': 247, 'RP': 317, 'DI': 216, 'GF': 329, 'QF': 234, 'QM': 153, 'SP': 446, 'YG': 317, 'VW': 237, 'CR': 115, 'WC': 76, 'CY': 130, 'WT': 123, 'YC': 161, 'CT': 238, 'YI': 597, 'QW': 71, 'CL': 384, 'CV': 415, 'WS': 126, 'EC': 122, 'TP': 339, 'RY': 368, 'CA': 479, 'CI': 246, 'NW': 92, 'FC': 184, 'MC': 80, 'TC': 
193, 'ME': 208, 'CQ': 90, 'NC': 116, 'RG': 447, 'MK': 182, 'DW': 96, 'CS': 218, 'CN': 90, 'RW': 121, 'CH': 74, 'WH': 70, 'CE': 98, 'WD': 90, 'PF': 188, 'MN': 100, 'CG': 218, 'PW': 71, 'WN': 91, 'CK': 102, 'MP': 109, 'CF': 175, 'PY': 155, 'HP': 145, 'PM': 101, 'WM': 80, 'CM': 98, 'WP': 67, 'MH': 81, 'CD': 
66, 'CP': 94}

p_sub = {'GT': 0.00266003470900308, 'ES': 0.0043608747459864625, 'WG': 0.0005389289652069438, 'QE': 0.004800917662531582, 'LR': 0.0036835053126529644, 'VR': 0.002763865060097996, 'LV': 0.014897183230903869, 'HR': 0.0016612856175186523, 'VI': 0.01405665181727836, 'WA': 0.001043247813382249, 'AE': 0.005814499661315284, 'KT': 0.003673616707786782, 'VM': 0.0025562043579081643, 'ET': 0.004242211487592273, 'AG': 0.007045630967154999, 'DA': 0.0035252876347940452, 'GR': 0.0025067613335772523, 'HI': 0.0010580807206815226, 'GI': 0.001977720973236491, 'QK': 0.004400429165451193, 'DQ': 0.0025067613335772523, 'IA': 0.006664919679806975, 'LG': 0.002803419479562726, 'ID': 0.001176743979075712, 'RQ': 0.0034115686788329467, 'KG': 0.0026303688944045328, 'SK': 0.0039851077610715295, 'ED': 0.006763805728468799, 'TV': 0.005873831290512378, 'DT': 0.0029220827379569155, 'LC': 0.0017502830613142944, 'KL': 0.0038812774099766132, 'KR': 0.006328707114356771, 'HD': 0.001414070495864091, 'GL': 0.002719366338200175, 'VD': 0.00161184259318774, 'TY': 0.0020073867878350384, 'VY': 0.0035796749615580486, 'TR': 0.0035549534493925926, 'AL': 0.008914577286863483, 'LI': 0.015698160225064647, 'AY': 0.0031050219279812907, 'IG': 0.0019233336464724875, 'KV': 0.0032088522790762065, 'KA': 0.005280514998541431, 'AI': 0.0059875502464734765, 'EG': 0.003090189020682017, 'PG': 0.0017354501540150207, 'AR': 0.004469649399514469, 'SM': 0.0010531364182484314, 'HY': 
0.0014387920080295472, 'AK': 0.005097575808517055, 'TS': 0.006585810840877514, 'HG': 0.0011619110717764384, 'KE': 0.006585810840877514, 'YA': 0.003218740883942389, 'EA': 0.0060369932708043885, 'FE': 0.0013003515399029927, 'SV': 0.0037477812442831505, 'ER': 0.005028355574453778, 'IM': 0.0033423484447696696, 'IK': 0.0023831537727499715, 'HS': 0.001542622359124463, 'LA': 0.008845357052800205, 'HT': 0.0014486806128957295, 'GS': 0.004321320326521732, 'AD': 0.0037725027564486065, 'QA': 0.0038615002002442486, 'GA': 0.006842914567398259, 'MA': 0.002353487958151424, 'NG': 0.003520343332360954, 'KS': 0.003970274853772255, 'LF': 0.008306428087593262, 'LY': 0.00459325696034175, 'FL': 0.00846464576545218, 'RI': 0.0022546019094895997, 'VA': 0.009364508808274784, 'AT': 0.00551784151532981, 'DN': 0.003925776131874435, 'GN': 0.0028231966892950907, 'GV': 0.002892416923358368, 'DE': 0.006467147582483325, 'RK': 0.006872580381996806, 'LS': 0.003441234493431494, 'SY': 0.0018788349245746664, 'KN': 0.0033176269326042136, 'FM': 0.0017305058515819296, 'KI': 0.0024029309824823365, 'LM': 0.005394233954502529, 'LD': 0.0020963842316306805, 'PR': 0.001478346427494277, 'QN': 0.0020766070218983155, 'SG': 0.004736641730901396, 'HL': 0.001542622359124463, 'TE': 0.004128492531631175, 'LT': 0.005003634062288322, 'EV': 0.003500566122628589, 'FQ': 0.0011668553742095297, 'SI': 0.0023386550508521504, 'EQ': 0.0052360162766436095, 'HE': 0.0017305058515819296, 'HA': 0.0018738906221415753, 'DG': 0.0035598977518256835, 'QG': 0.0020172753927012207, 'GK': 0.002501817031144161, 'FI': 0.005181628949879606, 'RC': 0.0005290403603407613, 'IL': 0.015806934878592655, 'EN': 0.003179186464477659, 'WR': 0.0006427593163018595, 'VC': 0.0019678323683703083, 'HK': 0.0016217311980539226, 'VS': 0.0033374041423365783, 'WL': 0.0017700602710466595, 'KH': 0.001720617246715747, 'QI': 0.001498123637226642, 'RH': 0.0017799488759128418, 'SN': 0.003732948336983877, 'EP': 0.0026007030798059854, 'TL': 0.004746530335767578, 'EK': 0.006739084216303343, 'KY': 0.001478346427494277, 
'DK': 0.0038367786880787926, 'RS': 0.0032879611180056663, 'FR': 0.0014684578226280946, 'MV': 0.0028429738990274557, 'KQ': 0.0039851077610715295, 'AN': 0.0031643535571783854, 'SD': 0.004039495087835533, 'DF': 0.0010333592085160666, 'HQ': 0.0012904629350368104, 'VQ': 0.002061774114599042, 'TK': 0.003846667292944975, 'GH': 0.0011816882815088034, 'AV': 0.00938428601800715, 'EY': 0.001695895734550291, 'PE': 0.0022447133046234174, 'IP': 0.0014289034031633647, 'YV': 0.0037972242686140625, 'LW': 0.0019974981829688557, 'FD': 0.0009146959501218771, 'IF': 0.0052607377888090655, 'SW': 0.000608149199270221, 'IE': 0.0022101031875917786, 'GD': 0.0030259130890518313, 'DP': 0.0018541134124092102, 'GQ': 0.0018986121343070313, 'MW': 0.0003807112873480245, 'NH': 0.0015129565445259157, 'LE': 0.0034906775177624065, 'RA': 0.004168046951095905, 'AQ': 0.0036192293810227783, 'VL': 0.014363198568130016, 'VH': 0.0016365641053531963, 'HV': 0.001414070495864091, 'PS': 0.0022694348167888734, 'LK': 0.003777447058881698, 'KC': 0.0005191517554745789, 'TD': 0.0032533510009740275, 'TM': 0.0012064097936742594, 'IY': 0.0030605232060834696, 'AW': 0.0009443617647204245, 'TA': 0.005730446519952732, 'HN': 0.0014289034031633647, 'EI': 0.0022546019094895997, 'FA': 0.003530231937227136, 'SF': 0.0017354501540150207, 'AF': 0.003451123098297677, 'IT': 
0.0037922799661809716, 'IR': 0.002150771558394684, 'AS': 0.007198904342580827, 'MF': 0.001631619802920105, 'NT': 0.003134687742579838, 'FV': 0.005952940129441838, 'DS': 0.003732948336983877, 'WK': 0.0004845416384429403, 'HW': 0.00037082268248184207, 'SL': 0.0036686724053536907, 'AC': 0.0019876095781026734, 'VK': 0.0028874726209252768, 'TN': 0.0025611486603412557, 'EH': 0.0016909514321171997, 'PD': 0.0017107286418495647, 'QR': 0.003307738327738031, 'IV': 0.01547072231314245, 'YN': 0.0012261870034066243, 'SA': 0.007278013181510287, 'VT': 0.00572055791508655, 'RN': 0.0024869841238448873, 'AP': 0.0030605232060834696, 'DV': 0.0017453387588812032, 'QH': 0.0013003515399029927, 'GC': 0.0008504200184916911, 'ND': 
0.00475147463820067, 'WE': 0.0005142074530414876, 'KD': 0.004044439390268624, 'EW': 0.0006575922236011332, 'LQ': 0.002704533430900901, 'VE': 0.0031149105328474734, 'NY': 0.0014882350323604594, 'ST': 0.006106213504867666, 'QD': 0.0027885865722634524, 'DH': 0.0014190147982971822, 'VG': 0.00294185994768928, 
'DC': 0.0003312682630171122, 'IQ': 0.0017799488759128418, 'TQ': 0.00273914354793254, 'EM': 0.0009888604866182455, 'PN': 0.001171799676642621, 'PK': 0.002091439929197589, 'YQ': 0.0011273009547447998, 'AH': 0.0018343362026768454, 'SE': 0.004815750569830856, 'RV': 0.002996247274453284, 'NA': 0.003441234493431494, 'LN': 0.0021853816754263226, 'AM': 0.0021853816754263226, 'KM': 0.001043247813382249, 'YE': 0.002046941207299768, 'GE': 0.0026847562211685366, 'QL': 0.0025957587773728944, 'DR': 0.0023831537727499715, 'ML': 0.004964079642823592, 'YH': 0.0015525109639906453, 'EF': 0.0013893489836986348, 'RE': 0.005329958022872343, 'DM': 0.0006575922236011332, 'FW': 0.0016662299199517437, 'NS': 0.0035500091469595012, 
'LH': 0.0018244475978106628, 'YM': 0.0011421338620440735, 'VF': 0.005216239066911245, 'WI': 0.0010729136279807963, 'FY': 0.004721808823602122, 'GM': 0.0009245845549880595, 'PT': 0.002066718417032133, 'FK': 0.001478346427494277, 'QS': 0.002521594240876526, 'VP': 0.0021408829535285016, 'IC': 0.0013992375885648173, 'SH': 0.0014882350323604594, 'HF': 0.0010036933939175192, 'RM': 0.0010778579304138876, 'WQ': 0.0004004884970803894, 'KP': 0.00213593865109541, 'IH': 0.0010729136279807963, 'PQ': 0.0011915768863749857, 'FS': 0.001888723529440849, 'NE': 0.0032731282107063926, 'RF': 0.0014190147982971822, 'EL': 0.0033868471666674907, 'QT': 0.0025957587773728944, 'HM': 0.00044004291654511923, 'PA': 0.0032780725131394835, 'TH': 0.0014684578226280946, 'KF': 0.0013942932861317262, 'TG': 0.0031198548352805644, 'HC': 0.00026204802895383507, 'MY': 0.0010729136279807963, 'NQ': 0.002239769002190326, 'SC': 0.0009493060671535156, 'IS': 0.0024523740068132485, 'YW': 0.0015722881737230104, 'DL': 0.002046941207299768, 'QP': 0.0012014654912411683, 'QV': 0.0022002145827255963, 'VN': 0.001740394456448112, 'SR': 0.0031841307669107505, 
'FP': 0.0008652529257909648, 'YL': 0.004939358130658136, 'SQ': 0.002758920757664905, 'RD': 0.0031247991377136557, 'MI': 0.0024622626116794313, 'FN': 0.0011174123498786173, 'RL': 0.003451123098297677, 'GY': 0.0014190147982971822, 'KW': 0.000588371989537856, 'RT': 0.00322368518637548, 'MG': 0.0011470781644771647, 'MR': 0.0009493060671535156, 'PI': 0.0015080122420928243, 'MT': 0.0012509085155720805, 'MS': 0.0010729136279807963, 'PL': 0.0021903259778594136, 'QY': 0.0010531364182484314, 'YK': 0.0017552273637473858, 'MQ': 0.0008158099014600525, 'TW': 0.0007119795503651368, 'NP': 0.0013794603788324525, 'MD': 0.0005735390822385823, 'PC': 0.00029171384355238244, 'YT': 0.002071662719465224, 'YD': 0.0012014654912411683, 'FH': 0.0011025794425793436, 'IN': 0.0012113540961073508, 'TF': 0.0022298803973241437, 'NL': 0.0023930423776161542, 'YS': 0.0016217311980539226, 'GW': 0.0005488175700731262, 'YF': 0.004682254404137392, 'NF': 0.0010086376963506104, 'WF': 0.0012756300277375367, 'FT': 0.002106272836496863, 'GP': 0.0017750045734797506, 'WY': 0.00136957177396627, 'DY': 0.0012459642131389893, 'NK': 0.0033324598399034873, 'TI': 0.0038318343856457012, 'QC': 0.000326323960584021, 'NR': 0.003040745996351105, 'YR': 0.001720617246715747, 'LP': 0.002066718417032133, 'PV': 0.0024227081922147016, 'NM': 0.0007119795503651368, 'NI': 
0.001478346427494277, 'YP': 0.0009394174622873332, 'IW': 0.001063025023114614, 'FG': 0.001567343871289919, 'PH': 0.000588371989537856, 'CW': 0.0002373265167883789, 'NV': 0.0020518855097328595, 'WV': 0.0012212427009735331, 'RP': 0.001567343871289919, 'DI': 0.001067969325547705, 'GF': 0.0016266755004870138, 'QF': 0.0011569667693433472, 'QM': 0.0007564782722629578, 'SP': 0.0022051588851586873, 'YG': 0.001567343871289919, 'VW': 0.001171799676642621, 'CR': 0.0005685947798054912, 'WC': 0.0003757669849149333, 'CY': 0.0006427593163018595, 'WT': 0.000608149199270221, 'YC': 0.0007960326917276876, 'CT': 0.001176743979075712, 'YI': 0.002951748552555463, 'QW': 0.0003510454727494771, 'CL': 0.0018986121343070313, 'CV': 
0.0020518855097328595, 'WS': 0.0006229821065694947, 'EC': 0.0006032048968371297, 'TP': 0.001676118524817926, 'RY': 0.0018195032953775717, 'CA': 0.002368320865450698, 'CI': 0.001216298398540442, 'NW': 0.0004548758238443929, 'FC': 0.0009097516476887858, 'MC': 0.0003955441946472982, 'TC': 0.0009542503695866069, 'ME': 0.0010284149060829752, 'CQ': 0.00044498721897821044, 'NC': 0.0005735390822385823, 'RG': 0.0022101031875917786, 'MK': 0.0008998630428226034, 'DW': 0.0004746530335767578, 'CS': 0.0010778579304138876, 'CN': 0.00044498721897821044, 'RW': 0.0005982605944040386, 'CH': 0.0003658783800487508, 'WH': 0.0003461011703163859, 'CE': 0.0004845416384429403, 'WD': 0.00044498721897821044, 'PF': 0.0009295288574211508, 'MN': 0.0004944302433091228, 'CG': 0.0010778579304138876, 'PW': 0.0003510454727494771, 'WN': 0.0004499315214113017, 'CK': 0.0005043188481753052, 'MP': 0.0005389289652069438, 'CF': 0.0008652529257909648, 'PY': 0.0007663668771291402, 'HP': 0.0007169238527982279, 'PM': 0.0004993745457422139, 'WM': 0.0003955441946472982, 'CM': 0.0004845416384429403, 'WP': 0.0003312682630171122, 'MH': 0.0004004884970803894, 'CD': 0.000326323960584021, 'CP': 0.0004647644287105754}

for k, v in sub_freq_matrix.items():
    sub_freq_matrix[k] = v / sub_tot

print(sub_freq_matrix) 

sub_csv = 'C:/Users/yolan/Documents/Holmes2/prot_align/matrices/sub_matrix.csv'
path_to_sup = 'C:/Users/yolan/SABmark/SABmark/sup/'
generate_matrix = True

matrix = {}
files_parsed = 0
expected_parsed = 0

# Generates a dictionary containing then number of distinct sequences in each group
# {group number : nseq}
def gen_nseq():
    nseq = {}
    setSummary = Path(path_to_sup).glob('set.summary').__iter__()
    summaryIter = open(setSummary.__next__())
    summaryIter.__next__()
    for line in summaryIter:
        line = line.split('\t')[:2]
        group = line[0]
        num = line[1]
        if group not in nseq.keys():
            nseq[int(group)] = int(num)
    return nseq

# Gets the protein sequences from a file, 
# returns as an array of two strings.
def get_seqs(file):
    iter = open(file).__iter__()
    line = iter.__next__()
    seqs = []
    seq = ""
    while iter:
        if ">" in line:
            if seq != "":
                seqs.append(seq)
                seq = ""
            line = iter.__next__()
        else:
            seq += line[:len(line)-1]
            try:
                line = iter.__next__()
            except:
                StopIteration
                seqs.append(seq)
                break
    if len(seq[0]) != len(seq[1]):
        return Exception("Alignment sequences different lengths")
    return seqs

def bgd_freq(seqs):
    parent = seqs[0]
    child = seqs[1]
    assert(len(parent) == len(child))
    global matrix
    for i in range(len(parent)):
        p = parent[i]
        c = child[i]
        if p != '-':
            if p in matrix.keys():
                matrix[p] += 1
            else:
                matrix[p] = 1
        if c != '-':
            if c in matrix.keys():
                matrix[c] += 1
            else:
                matrix[c] = 1
    return matrix


def apply_matrix(file):
    global matrix
    bgd_freq(get_seqs(file))
    return

# Iterates through the files in a group (does not count repeats, 
# and the parent sequence is consistent)
def file_iterator(path, group):
    global matrix
    count = 0
    gen = path.__iter__()
    while gen and count < nseq[group]:
        try:
            apply_matrix(gen.__next__())
            count += 1
        except:
            StopIteration
            break
    return count

# Iterates through specified group range to generate the matrix
def matrix_generator(bool):
    if not bool:
        return
    global matrix
    global files_parsed
    global expected_parsed
    for group in range(1, 426):
        print("Analyzing... %d/%d complete"%(group, 425))
        files_parsed += file_iterator(glob.iglob(path_to_sup + 'group' + str(group) + '/reference/*.fasta'), group)
        expected_parsed += nseq[group]

def csv_aggregator():
    global sub_matrix
    csv_reader.__next__()
    for row in csv_reader:
        aa1 = row[1]
        aa2 = row[3]
        count = int(row[4])
        aa = aa1 + aa2
        if aa not in sub_matrix.keys():
            sub_matrix[aa] = 1
        else:
            sub_matrix[aa] += count


nseq = gen_nseq()
# matrix_generator(generate_matrix)
# print(sum(matrix.values()))
# print(matrix)

sub_matrix = {}
csv_reader = csv.reader(open(sub_csv))
csv_aggregator()
# print(sub_matrix)
